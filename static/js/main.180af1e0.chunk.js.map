{"version":3,"sources":["components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["post","props","react_default","a","createElement","className","title","author","FullPost","Component","NewPost","state","content","_this2","this","type","value","onChange","event","setState","target","rows","Blog","posts","axios","get","then","response","updatedPosts","data","slice","map","Object","objectSpread","console","log","Post_Post","key","id","components_FullPost_FullPost","components_NewPost_NewPost","App","containers_Blog_Blog","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.180af1e0.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Post.css';\n\nconst post = (props) => (\n    <article className=\"Post\">\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n);\n\nexport default post;","import React, { Component } from 'react';\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n    render () {\n        let post = <p>Please select a Post!</p>;\n        post = (\n            <div className=\"FullPost\">\n                <h1>Title</h1>\n                <p>Content</p>\n                <div className=\"Edit\">\n                    <button className=\"Delete\">Delete</button>\n                </div>\n            </div>\n\n        );\n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\n\nimport './NewPost.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max'\n    }\n\n    render () {\n        return (\n            <div className=\"NewPost\">\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\n                <label>Content</label>\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />\n                <label>Author</label>\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\n                    <option value=\"Max\">Max</option>\n                    <option value=\"Manu\">Manu</option>\n                </select>\n                <button>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import React, { Component } from 'react';\n\nimport axios from 'axios';\nimport Post from '../../components/Post/Post';\nimport FullPost from '../../components/FullPost/FullPost';\nimport NewPost from '../../components/NewPost/NewPost';\nimport './Blog.css';\n\nclass Blog extends Component {\n    state={\n        posts:[]\n    }\n    componentDidMount(){\n        axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then(response=>{\n            const posts = response.data.slice(0,4); \n            const updatedPosts = posts.map(post => {\n                    return{\n                        ...post,\n                        author:'Max'\n                    }\n\n            });\n            this.setState({posts:updatedPosts});\n            console.log(response);\n        });\n    }\n    render () {\n        const posts = this.state.posts.map(post=>{\n            return <Post key={post.id} title={post.title} author={post.author} />\n        });\n        return (\n            <div>\n                <section className=\"Posts\">\n                   {posts}\n                </section>\n                <section>\n                    <FullPost />\n                </section>\n                <section>\n                    <NewPost />\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from 'react';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Blog />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}